#!/bin/bash
# ------------------
# - Script written (partially) by Jordan Moore (Avalon Consulting, LLC)
# -
# - This script is used for scripting YCSB clients that are setup via Vagrant
# - Assumes clients are named sequentially ycsb01, ycsb02, ... ycsbNN
# ------------------

# ARG_POSITIONAL_SINGLE([workload],[YCSB workload name])
# ARG_POSITIONAL_SINGLE([op],[Operation (run|load|read)],[run])
# ARG_OPTIONAL_SINGLE([threads],[t],[Number of threads],[35])
# ARG_OPTIONAL_SINGLE([clients],[c],[Number or clients],[1])
# ARG_OPTIONAL_SINGLE([run],[r],[Run number],[1])
# ARG_HELP([YCSB Benchmark Wrapper script])

### CODE GENERATED BY Argbash v2.2.3 ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

#=========== START EDITING ===========#

# The driver used by YCSB e.g. cassandra-cql
export YCSB_DRIVER=
if [ "x$YCSB_DRIVER" == "x" ]; then
	echo "The YCSB driver has not been set. Please update $0."
	exit 1
fi

# The server(s) that YCSB will connect to
# See the YCSB documentation for this property
host=
if [ "x$host" == "x" ]; then
	echo "The hosts have not been set. Please update $0."
	exit 1
fi
# The driver may provide different property names for setting the servers
# Edit this for additional base YCSB properties for the driver being used
#   for example, timeouts
DRIVER_OPTS="-p hosts=$host -p cassandra.connecttimeoutmillis=50000" # ex. -p host=${server_ip}

# Adding driver-specific options for YCSB run
consistency=QUORUM
RUN_OPTS="$DRIVER_OPTS  -p cassandra.writeconsistencylevel=$consistency -p cassandra.readconsistencylevel=$consistency"

# Adding driver-specific options for YCSB load
LOAD_OPTS="$DRIVER_OPTS -p cassandra.writeconsistencylevel=ANY"

#=========== STOP EDITING ===========#

# Client-side file locations
export YCSB_HOME=/opt/ycsb
export WORKLOAD_DIR=/vagrant/ycsb_data/workloads
export OUTPUT_DIR=/home/centos

# THE DEFAULTS INITIALIZATION - POSITIONALS
_arg_workload=
_arg_op="run"
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_threads=35
_arg_clients=1
_arg_run=1

print_help ()
{
	echo "YCSB Benchmark Wrapper script"
	printf 'Usage: %s [-t|--threads <arg>] [-c|--clients <arg>] [-r|--run <arg>] [-h|--help] <workload> [<op>]\n' "$0"
	printf "\t%s\n" "<workload>: YCSB workload name"
	printf "\t%s\n" "<op>: Operation (run|load|read) (default: '""run""')"
	printf "\t%s\n" "-t,--threads: Number of threads (default: 35)"
	printf "\t%s\n" "-c,--clients: Number or clients (default: 1)"
	printf "\t%s\n" "-r,--run: Run number (default: 1)"
	printf "\t%s\n" "-h,--help: Prints help"
}

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

collect_metrics() {
  if [ $# -lt 1 ]; then
    die "Missing required parameter: collect_metrics <nodes>" 1
  fi

  export YCSB_NODES=$1

	echo "Collecting metrics from [ $YCSB_NODES ] clients."

  for i in $(seq 1 $YCSB_NODES)
  do
    h="ycsb$(printf '%02d' $i)"
    vagrant ssh $h -c "grep -oEi '^\[(READ|UPDATE|INSERT|SCAN|OVERALL)\], (Throughput|95th).*' $OUTPUT_DIR/${OUTPUT_FILE}.log"
  done
}

load_data() {
  if [ $# -lt 2 ]; then
    die "Missing required parameter: load_data <nodes> <threads>" 1
  fi

	export YCSB_NODES=$1 # Ensure vagrant knows about these
  workloadThreads=$2

  # Is set at 10 hours. Hopefully all records get loaded in that time.
  YCSB_CMD="bin/ycsb load $YCSB_DRIVER -s -threads ${workloadThreads} -P ${workloadPath} -p maxexecutiontime=36000 $LOAD_OPTS"

  # Set at 150 million
	_total_records=150000000
  recordcount=$(( $_total_records / $YCSB_NODES ))
	echo "Loading [ $recordcount ] records from [ $YCSB_NODES ] clients. Each running [ $workloadThreads ] threads."

	_out_file=load-$_arg_workload
  for i in $(seq 0 $(($YCSB_NODES - 1)))
  do
    h="ycsb$(printf '%02d' $((i + 1)))"
    vagrant ssh $h -c "nohup $YCSB_HOME/$YCSB_CMD -p insertstart=$(($recordcount * $i)) -p insertcount=$recordcount > $OUTPUT_DIR/$_out_file.log 2> $OUTPUT_DIR/$_out_file.err < /dev/null & sleep 1"
  done
}

benchmark() {
  if [ $# -lt 2 ]; then
    echo "Missing required parameter: benchmark <nodes> <threads>"
    exit 1
  fi

	export YCSB_NODES=$1 # Ensure vagrant knows about these
  workloadThreads=$2

  export YCSB_CMD="bin/ycsb run $YCSB_DRIVER -P ${workloadPath} -threads ${workloadThreads} -p maxexecutiontime=1200 -p operationcount=900000000 $RUN_OPTS"

	echo "Benchmarking run #$_arg_run on [ $YCSB_NODES ] clients. Each running [ $workloadThreads ] threads."

  for i in $(seq 1 $YCSB_NODES)
  do
    h="ycsb$(printf '%02d' $i)"
    vagrant ssh $h -c "nohup $YCSB_HOME/${YCSB_CMD} > $OUTPUT_DIR/${OUTPUT_FILE}.log 2> $OUTPUT_DIR/${OUTPUT_FILE}.err < /dev/null & sleep 1"
  done

}

# THE PARSING ITSELF
while test $# -gt 0
do
	_key="$1"
	case "$_key" in
		-t|--threads|--threads=*)
			_val="${_key##--threads=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_threads="$_val"
			;;
		-c|--clients|--clients=*)
			_val="${_key##--clients=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_clients="$_val"
			;;
		-r|--run|--run=*)
			_val="${_key##--run=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_run="$_val"
			;;
		-h|--help)
			print_help
			exit 0
			;;
		*)
			_positionals+=("$1")
			;;
	esac
	shift
done

_positional_names=('_arg_workload' '_arg_op' )
test ${#_positionals[@]} -lt 1 && _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require between 1 and 2, but got only ${#_positionals[@]}." 1
test ${#_positionals[@]} -gt 2 && _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 1 and 2, but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
for (( ii = 0; ii < ${#_positionals[@]}; ii++))
do
	eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
done

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

export YCSB_NODES=$_arg_clients # variable used by Vagrant

# Derived values
workloadPath=$WORKLOAD_DIR/benchmark-${_arg_workload}
workloadThreadGroup=$(( $YCSB_NODES * $_arg_threads ))
OUTPUT_FILE="${_arg_workload}-${workloadThreadGroup}-${_arg_run}"

echo "Driver: $YCSB_DRIVER"
echo "Workload: $_arg_workload"

case "$_arg_op" in
	run)
		benchmark $YCSB_NODES $_arg_threads
		;;
	load)
		load_data $YCSB_NODES $_arg_threads
		;;
	read)
		collect_metrics $YCSB_NODES
		;;
	*)
		_PRINT_HELP=yes die "FATAL ERROR: Unknown operation provided." 1
	;;
esac

# ] <-- needed because of Argbash
